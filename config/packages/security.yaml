security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    users_in_memory: { memory: null }
    admin: { id: EtoA\Security\Admin\AdminUserProvider }
    player: { id: EtoA\Security\Player\PlayerUserProvider }
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    admin:
      pattern: ^/admin
      provider: admin
      custom_authenticators:
        - EtoA\Security\Admin\AdminAuthenticator
      entry_point: EtoA\Security\Admin\AdminAuthenticator
      logout:
        path: /admin/logout
        target: /admin/
      two_factor:
        auth_form_path: admin_2fa_login
        check_path: admin_2fa_login_check
    game:
      pattern: ^/game
      provider: player
      custom_authenticators:
        - EtoA\Security\Player\PlayerAuthenticator
      entry_point: EtoA\Security\Player\PlayerAuthenticator
      logout:
        path: /game/logout
        target: /
    main:
      lazy: true
      provider: users_in_memory

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
    # allow unauthenticated admin users to access the login form
    - { path: ^/admin/login/tfa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
    - { path: ^/admin/login, roles: PUBLIC_ACCESS }
    # but require authentication for all other admin routes
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/game/login, roles: PUBLIC_ACCESS }
    - { path: ^/game, roles: ROLE_PLAYER }

  role_hierarchy:
    ROLE_ADMIN: ROLE_USER
    ROLE_ADMIN_MASTER: [ ROLE_ADMIN_SUPER-ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_ADMIN ]
    ROLE_ADMIN_SUPER-ADMIN: ROLE_ADMIN_GAME-ADMIN
    ROLE_ADMIN_GAME-ADMIN: ROLE_ADMIN_TRIAL-ADMIN
    ROLE_ADMIN_TRIAL-ADMIN: ROLE_ADMIN
    ROLE_ADMIN_CHAT-ADMIN: ROLE_ADMIN

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
