#!/bin/bash

CONFIG_DIR=/etc/etoad
ENABLED_CONFIG_DIR=$CONFIG_DIR/instances-enabled
AVAILALE_CONFIG_DIR=$CONFIG_DIR/instances-available
PID_DIR=/var/run/etoad
#ETOAD_BIN=/usr/bin/etoad
ETOAD_BIN=/usr/local/bin/etoad
USER=etoa
CONFIG_EXT=.conf

iavailable=()
ienabled=()

for file in $(find $AVAILALE_CONFIG_DIR -name *${CONFIG_EXT}); do
	instance=$(basename ${file%${CONFIG_EXT}})
	iavailable+=($instance)
done
for file in $(find $ENABLED_CONFIG_DIR -name *${CONFIG_EXT}); do
	instance=$(basename ${file%${CONFIG_EXT}})
	ienabled+=($instance)
done

if [ ! -d $PID_DIR ]; then
    mkdir -p $PID_DIR
    chown $USER $PID_DIR
fi

run_unprivileged() {
	local cmd="$@"
	if [ $(id -u) -ne 0 ]; then
		$cmd
		return $?
	fi
	if ! id -u $USER >/dev/null 2>&1; then
		echo "User '$USER' does not exist!"
		exit 1
	fi
	su $USER -c "$cmd"
	return $?
}

#
# Starts an instance
#
do_start() {
	local instance=$1
	if ! check_status $instance; then
		configfile=$ENABLED_CONFIG_DIR/${instance}${CONFIG_EXT}
		pidfile=$PID_DIR/$instance.pid
		run_unprivileged $ETOAD_BIN $instance -d -c $configfile -p $pidfile
		return $?
	fi
	return 0
}

#
# Stops an instance
#
do_stop() {
	local instance=$1
	if check_status $instance; then
		configfile=$ENABLED_CONFIG_DIR/${instance}${CONFIG_EXT}
		pidfile=$PID_DIR/$instance.pid
		run_unprivileged $ETOAD_BIN $instance -d -s -c $configfile -p $pidfile
		return $?
	fi
	return 0
}

#
# Checks the status of the etoad instance
#
# Return values:
#  0: running
#  1: not running (no pid file)
#  2: not running (pid file exists, but no process)
#  3: value in pid file is invalid
#
check_status() {
	local instance=$1
	re='^[0-9]+$'
	pidfile=$PID_DIR/$instance.pid
	if [ -e $pidfile ]; then
		pid=$(cat $pidfile | head -1)
		if [[ $pid =~ $re ]] ; then
			if [ -e /proc/$pid ]; then
				return 0
			fi
			return 2
		fi
		return 3
	fi
	return 1
}

#
# Reload instance config
#
do_reload() {
	local instance=$1
	re='^[0-9]+$'
	pidfile=$PID_DIR/$instance.pid
	if [ -e $pidfile ]; then
		pid=$(cat $pidfile | head -1)
		if [[ $pid =~ $re ]] ; then
			if [ -e /proc/$pid ]; then
				kill -s HUP $pid
				return $?
			fi
			return 2
		fi
		return 3
	fi
	return 1
}

contains_element () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

case "$1" in
	start)
		ret=0
		for instance in ${ienabled[@]}; do
			do_start $instance
			r=$?
			if [ $r -ne 0 ]; then ret=$r; fi
		done
		exit $ret
	;;
	stop)
		ret=0
		for instance in ${ienabled[@]}; do
			do_stop $instance
			r=$?
			if [ $r -ne 0 ]; then ret=$r; fi
		done
		exit $ret
	;;
	restart)
		ret=0
		for instance in ${ienabled[@]}; do
			do_stop $instance
			do_start $instance
		done
		exit $ret
	;;
	reload)
		ret=0
		for instance in ${ienabled[@]}; do
			do_reload $instance
		done
		exit $ret
	;;
	status)
		ret=0
		for instance in ${ienabled[@]}; do
			if check_status $instance; then
				echo "$instance: running"
			else
				echo "$instance: stopped"
				ret=1
			fi
		done
		exit $ret
	;;
	list)
		echo "Disabled:"
		for i in  ${iavailable[@]}; do
			if ! contains_element $i "${ienabled[@]}"; then
				echo "  $i"
			fi
		done
		echo "Enabled:"
		for i in  ${ienabled[@]}; do
			echo "  $i"
		done
		exit 0
	;;
	enable)
		if [ $# -ne 2 ]; then
			echo "Usage: $(basename $0) enable <instance>"; exit 3;
		fi
		instance=$2
		if ! contains_element $instance "${iavailable[@]}"; then
			echo "Config file $AVAILALE_CONFIG_DIR/$instance${CONFIG_EXT} missing!"
			exit 1;
		fi
		if contains_element $instance "${ienabled[@]}"; then
			echo "'$instance' already enabled!"
			exit 0;
		fi
		ln -s $AVAILALE_CONFIG_DIR/${instance}${CONFIG_EXT} $ENABLED_CONFIG_DIR/${instance}${CONFIG_EXT}
		echo "Instance '$instance' has been enabled. Do not forget to execute"
		echo "  $(basename $0) restart"
		exit 0
	;;
	disable)
		if [ $# -ne 2 ]; then
			echo "Usage: $(basename $0) disable <instance>"; exit 3;
		fi
		instance=$2
		if ! contains_element $instance "${ienabled[@]}"; then
			echo "'$instance' not enabled!"
			exit 0;
		fi
		rm -f $ENABLED_CONFIG_DIR/${instance}${CONFIG_EXT}
		echo "Instance '$instance' has been disabled."
		exit 0
	;;
	*)
		echo "Usage: $(basename $0) {start|stop|status|restart|reload|list|enable|disable}" >&2
		exit 3
	;;
esac
